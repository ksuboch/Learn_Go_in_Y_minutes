// Однострочный комментарий
/* Много
строчный комментарий*/

package main

import "fmt"

// Объявление функции main. Это специальная функция,
// служащая точкой входа для исполняемой программы.
func main() {
	// Println выводит строку в stdout
	// Это функция из пакета fmt
	fmt.Println("Hello world!")
}

// Параметры функции указываются в круглых скобках
// пустые скобки обязательны, даже если параметров нет
func beyondHello() {
	var x int // Переменные должны быть объявлены до их использования
	x = 3     // Присвоение значения переменной
	// Краткое определение := позволяет объявить переменную с автоматической
	// подстановкой типа значчения
	y := 4
	sum, prod := learnMultiple(x, y)        // Функция возвращает два значения
	fmt.Println("sum:", sum, "prod:", prod) // Простой вывод
}

// Функция, имеющая входные параметры и возвращающая несколько значений
func learnMultiple(x, y int) (sum, prod int) {
	return x + y, x * y // возврат двух значений
}

func learnTypes() {
	// тип string
	s := "Learn Go!"

	s2 := `"Чистый" строковый литерал
может содержать переносы строк`

	// Символы не из ASCII
	g := 'Σ' // тип rune - алиас для типа int32, содержит символ юникода

	f := 3.141595 // float64, 64-х битное число с плавающей точкой
	c := 3 + 4i   // complex128, внутри себя содержит два float64

	// Синтаксис var  с инициализ0ациями
	var u uint = 7 // беззнаковое, но размер зависит от реализации, как и у int
	var pi float32 = 22. / 7

	// Синтаксис приведения типа с определением
	n := byte('\n') // byte - это алиас для uint8

	// Массивы имеют фиксированный размер на момент компиляции
	var a4 = [4]int // массив из 4-х int, инициализирован нулями
	a3 := [...]int{3, 1, 5} // массив из 3-х int, ручная инициализация

}
